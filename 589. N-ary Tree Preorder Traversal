/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
    public List<Integer> preorder(Node root) {
        /*
        // iterative solution with complexity of O(n)
        LinkedList<Node> stack = new LinkedList<>();
        LinkedList<Integer> output = new LinkedList<>();

        if(root == null) {
            return output;
        }

        stack.add(root);
        while(!stack.isEmpty()) {
            Node node = stack.pollLast();
            output.add(node.val);

            Collections.reverse(node.children);
            for(Node childNode : node.children){
                stack.add(childNode);
            }
        }
        return output;
        */
        List<Integer> result = new LinkedList<>();
        
        preOrder(root, result);
        return result;
    }

    public List<Integer> preOrder(Node root, List result){
        if(root == null) {
            return result;
        }

        result.add(root.val);
        for(Node childNode : root.children) {
            preOrder(childNode, result);
        }
        return result;
    }
} 
