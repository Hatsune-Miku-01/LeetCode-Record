class Solution {
    public int climbStairs(int n) {
        // recursive solutoin
        /* over time limit
        if(n == 0) {
            return 1;
        }
        else if(n < 0) {
            return 0;
        }

        return climbStairs(n-1)+climbStairs(n-2);
        // recursive with O(n)
        int memo[] = new int[n + 1];
        return climb_Stairs(0, n, memo);

        public int climb_Stairs(int i, int n, int memo[]) {
        if (i > n) {
            return 0;
        }
        if (i == n) {
            return 1;
        }
        if (memo[i] > 0) {
            return memo[i];
        }
        memo[i] = climb_Stairs(i + 1, n, memo) + climb_Stairs(i + 2, n, memo);
        return memo[i];
        }

        */


        //iterative solution
        // Dynamic Programming
        // if n == 1 means only one way to reach n
        if(n == 1) {
          return 1;
        }
        // create an array to dynamically record the value of the next step
        int[] dp = new int[n+1];
        dp[1] = 1; // only one way to reach 1
        dp[2] = 2; // two way to reach 2, 2 and 1 + 1
        for(int i = 3; i <= n; i++) {
          dp[i] = dp[i - 1] + dp[i - 2];
        }
        return dp[n];
        
    }
    
}
